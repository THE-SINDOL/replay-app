name: Build UI

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      platform:
        required: true
        type: string
      arch:
        required: true
        type: string
      npm_config_platform:
        required: true
        type: string
      dev:
        required: false
        type: boolean
        default: false
      new_release_version:
        required: false
        type: string
        default: ""

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_ENV: production
  APP_ENV: production
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
  APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CSC_LINK: ${{ secrets.CSC_LINK }}
  CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v3
      - name: Print path
        if: inputs.platform == 'mac'
        run: |
          echo "Path: $PATH"
          echo "Github Path: $GITHUB_PATH"

      - name: Install apple cert
        if: inputs.platform == 'mac'
        run: |
          curl --http1.1 --retry 3 --retry-all-errors -f -o AppleIncRootCertificate.cer https://www.apple.com/appleca/AppleIncRootCertificate.cer && security import AppleIncRootCertificate.cer
          curl --http1.1 --retry 3 --retry-all-errors -f -o AppleWWDRCA.cer https://developer.apple.com/certificationauthority/AppleWWDRCA.cer && security import AppleWWDRCA.cer
          curl --http1.1 --retry 3 --retry-all-errors -f -o AppleWWDRCAG2.cer https://www.apple.com/certificateauthority/AppleWWDRCAG2.cer  && security import AppleWWDRCAG2.cer
          curl --http1.1 --retry 3 --retry-all-errors -f -o AppleWWDRCAG3.cer https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer  && security import AppleWWDRCAG3.cer
          curl --http1.1 --retry 3 --retry-all-errors -f -o AppleWWDRCAG4.cer https://www.apple.com/certificateauthority/AppleWWDRCAG4.cer  && security import AppleWWDRCAG4.cer
          curl --http1.1 --retry 3 --retry-all-errors -f -o AppleWWDRCAG5.cer https://www.apple.com/certificateauthority/AppleWWDRCAG5.cer  && security import AppleWWDRCAG5.cer
          curl --http1.1 --retry 3 --retry-all-errors -f -o AppleWWDRCAG6.cer https://www.apple.com/certificateauthority/AppleWWDRCAG6.cer  && security import AppleWWDRCAG6.cer
          curl --http1.1 --retry 3 --retry-all-errors -f -o DevAuthCA.cer https://www.apple.com/certificateauthority/DevAuthCA.cer  && security import DevAuthCA.cer
          curl --http1.1 --retry 3 --retry-all-errors -f -o DeveloperIDCA.cer https://www.apple.com/certificateauthority/DeveloperIDCA.cer  && security import DeveloperIDCA.cer

      - uses: actions/setup-node@v3
        with:
          node-version: 19

      - name: Install yarn
        run: npm i -g yarn
        env:
          NODE_ENV: development
          npm_config_arch: ${{ inputs.arch }}
          npm_config_platform: ${{ inputs.npm_config_platform }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          NODE_ENV: development
          npm_config_arch: ${{ inputs.arch }}
          npm_config_platform: ${{ inputs.npm_config_platform }}

      - name: Typecheck
        run: yarn typecheck

      - name: Update package.json version
        run: yarn update-version
        env:
          NEW_RELEASE_VERSION: ${{ inputs.new_release_version || '' }}
          DEV_FASTBUILD: ${{ inputs.dev == true }}

      - name: Build UI and Electron assets
        run: yarn build

      - name: Package for ${{ inputs.platform }} ${{ inputs.arch }}
        if: inputs.dev == false || inputs.platform != 'mac'
        uses: nick-fields/retry@v2
        with:
          max_attempts: 2
          timeout_minutes: 40
          retry_on: error
          command: yarn package --${{ inputs.arch }} -p always
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dev fastbuild
        if: inputs.dev == true && inputs.platform == 'mac'
        run: yarn package --${{ inputs.arch }} -m zip -p always
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEV_FASTBUILD: true

      - uses: vimtor/action-zip@v1.1
        with:
          files: electron/build ui/out/
          dest: build-${{ runner.os }}-${{ inputs.arch }}.zip
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ runner.os }}-${{ inputs.arch }}
          path: |
            build-${{ runner.os }}-${{ inputs.arch }}.zip
            dist/*.yml
            !dist/**/*.app
            !dist/latest-mac*
          if-no-files-found: error
      - name: Print download urls
        if: inputs.dev == true && inputs.platform == 'mac'
        run: |
          vers=$(cat package.json | grep \"version\" | awk -F '"' '{print $4}')
          echo "https://updates-dev.replay-music.xyz/Replay-arm64-$vers.zip"
      - name: Print download urls
        if: inputs.dev == false && inputs.platform == 'mac'
        run: |
          vers=$(cat package.json | grep \"version\" | awk -F '"' '{print $4}')
          echo "https://updates-linux.replay-music.xyz/Replay-$vers.deb"
          echo "https://updates-mac-arm64.replay-music.xyz/Replay-arm64-$vers.zip"
          echo "https://updates-mac-x64.replay-music.xyz/Replay-x64-$vers.zip"
          echo "https://updates-windows.replay-music.xyz/Replay-$vers.exe"
